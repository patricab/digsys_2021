# -*- coding: utf-8 -*-

# *****************************************************************************
#
# Author: Ã˜ystein Gjermundnes
#
# Purpose:
#   FIR filter
#
# *****************************************************************************
import matplotlib.pyplot as plt
import numpy as np


class fir_filter:

    def __init__(self, filter_coeff):
        self.h = filter_coeff
        self.N = len(filter_coeff)

    # ****************************************************************************
    #
    #          N
    #         ---
    #         \
    # y[n] =   | h[k]x[n-k]
    #         /
    #         ---
    #         k=0
    #
    # ****************************************************************************
    def filter_input(self, x):
        y = []
        # for n in range(len(x) + self.N - 1): # used if all samples are to be
        # pushed out..
        for n in range(len(x)):
            s = 0
            for k in range(self.N):
                if (n - k) in range(len(x)):  # Zero if out of bounds
                    s += self.h[k] * x[n - k]
            y.append(s)
        return y

# Generated by MatLab as a 19th order lowpass equiripple filter with coefficients scaled to 16 bit.
# Wpass = 0.2, Wstop = 0.4. With order 19, this gave >35 dB attenuation in the stop band.
# Asked MatLab to quantize the coefficients, under the following conditions:
# Input range -1 to 1 with 16 bit inputs.
# Fixed point coefficients - 16 bit
h = [0.00154113769531250, 0.0162506103515625, 0.0134277343750000, -0.00471496582031250, -0.0351104736328125, -0.0485992431640625, -0.0117645263671875, 0.0836944580078125, 0.203826904296875, 0.287704467773438,
     0.287704467773438, 0.203826904296875, 0.0836944580078125, -0.0117645263671875, -0.0485992431640625, -0.0351104736328125, -0.00471496582031250, 0.0134277343750000, 0.0162506103515625, 0.00154113769531250]

c = fir_filter(h)

n = np.arange(500)
omega = 0.01
noisy_omega = 0.4
x = 0.9 * np.sin(omega * np.pi * n) + 0.1 * np.sin(noisy_omega * np.pi * n)
y = c.filter_input(x)

plt.plot(n, x, n, y)
plt.show()
